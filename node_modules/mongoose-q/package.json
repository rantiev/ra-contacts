{
  "name": "mongoose-q",
  "version": "0.1.0",
  "description": "kriskowal's Q support for mongoose",
  "author": {
    "name": "Dongsu Jang",
    "email": "iolothebard@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://git@github.com/iolo/mongoose-q.git"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.12",
    "iojs": ">=2.0",
    "npm": ">=2.0"
  },
  "dependencies": {
    "q": ">=1.4.1",
    "mongoose": ">=4.1.1"
  },
  "devDependencies": {
    "debug": "latest",
    "gulp": "latest",
    "gulp-doxx": "latest",
    "gulp-jshint": "latest",
    "gulp-mocha": "latest",
    "gulp-util": "latest",
    "mocha": "latest",
    "pow-mongodb-fixtures": "latest"
  },
  "readme": "mongoose-q\n==========\n\n>\n> ![WANTED](http://web.redding.com/images/misc/wanted-responsive.png)\n>\n> ***WANTED: looking for new maintainer or contributor***\n>\n> please contact me via [email](mailto:iolothebard at gmail dot com) or [twitter](http://twitter.com/iolothebard)\n>\n\n\n[kriskowal's Q](http://documentup.com/kriskowal/q/) support for [mongoose](http://mongoosejs.com).\n\nfor [mongodb native nodejs driver](http://mongodb.github.io/node-mongodb-native/), see [mongo-q](http://github.com/iolo/mongo-q).\n\nusage\n-----\n\n### to apply Q with default suffix 'Q':\n\n```javascript\nvar mongoose = require('mongoose-q')(require('mongoose'));\n// verbose way: mongooseQ is unused\nvar mongoose = require('mongoose'),\n    mongooseQ = require('mongoose-q')(mongoose)\n// shortest way: mongoose will be loaded by mongoose-q\nvar mongoose = require('mongoose-q')();\n```\n\n### to apply another Q implementation(since v0.0.15):\n\n```javascript\n// to use bluebird\nvar mongoose = require('mongoose-q')(require('mongoose'), {q:require('q-bluebird')});\n```\n\n### use Q-applied `model` statics:\n\n```javascript\nSomeModel.findByIdQ(....blahblah...)\n  .then(function (result) { ... })\n  .catch(function (err) { ... })\n  .done();\n```\n\n### use Q-applied `model` methods:\n\n```javascript\nvar someModel = new SomeModel(...);\nsomeModel.populateQ()\n  .then(function (result) { ... })\n  .catch(function (err) { ... })\n  .done();\n```\n\n### use Q-applied `query` methods:\n\n```javascript\nSomeModel.find(...).where(...).skip(...).limit(...).sort(...).populate(...)\n  .execQ() // no 'Q' suffix for Query methods except for execQ()\n  .then(function (result) { ... })\n  .catch(function (err) { ... })\n  .done();\n```\n\n### use Q-applied `aggregate` methods:\n\n```javascript\nSomeModel.aggregate(...).project(...).group(...).match(...).skip(...).limit(...).sort(...).unwind(...)\n  .execQ() // no 'Q' suffix for Aggregate methods except for execQ()\n  .then(function (result) { ... })\n  .catch(function (err) { ... })\n  .done();\n```\n\n### to apply Q with custom `suffix`/`prefix`:\n\n```javascript\nvar mongoose = require('mongoose-q')(require('mongoose'), {prefix:'promiseOf_', suffix:'_withQ'});\nSomeModel.promiseOf_findAndUpdate_withQ(...)\n  .then(function (result) { ... })\n  .catch(function (err) { ... })\n  .done();\n```\n\n### to apply Q with custom name `mapper`:\n\n```javascript\nfunction customMapper(name) {\n  return 'q' + name.charAt(0).toUpperCase() + name.substring(1);\n}\nvar mongoose = require('mongoose-q')(require('mongoose'), {mapper:customMapper});\nSomeModel.qFindAndUpdate(...)\n  .then(function (result) { ... })\n  .catch(function (err) { ... })\n  .done();\n```\n\n### **DEPRECATED** to apply Q with `spread`:\n\n> NOTE: since mongoose 4.x: no spread for update()!\n\n> NOTE: without `spread` option(by default), you can access only the first result with `then`!!\n\n```javascript\nvar mongoose = require('mongoose-q')(require('mongoose'), {spread:true});\nSomeModel.createQ(doc1, doc2, ...)\n  .spread(function (saved1, saved2, ...) { ... })\n  .catch(function (err) { ... })\n  .done();\nSomeModel.createQ(doc1, doc2, ...)\n  .then(function (result) { var saved1 = result[0], raw = saved1[1]; ... })\n  .catch(function (err) { ... })\n  .done();\n...\nvar model = new SomeModel();\n...\nmodel.saveQ()\n  .spread(function (savedDoc, affectedRows) { ... })\n  .catch(function (err) { ... })\n  .done();\n...\nmodel.saveQ()\n  .then(function (result) { var savedDoc = result[0], affectedRows = result[1]; ... })\n  .catch(function (err) { ... })\n  .done();\n```\n\n### to define custom statics/instance methods using Q\n\n> NOTE: this is not a feature of mongoose-q\n\n```javascript\nSomeSchema.statics.findByName = function (name) {\n  return this.findQ({name: name}); // NOTE: returns Promise object.\n};\n...\nvar SomeModel = mongoose.model('Some', SomeSchema);\nSomeModel.findByName('foo').then(function(result) {\n  console.log(result);\n});\n```\n\nThat's all folks!\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/iolo/mongoose-q/issues"
  },
  "homepage": "https://github.com/iolo/mongoose-q",
  "_id": "mongoose-q@0.1.0",
  "_shasum": "fba1478228d03a532a0238bc85fe930931c2e526",
  "_from": "mongoose-q@",
  "_resolved": "https://registry.npmjs.org/mongoose-q/-/mongoose-q-0.1.0.tgz"
}
